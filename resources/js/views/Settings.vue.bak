<template>
    <v-container>
        <h1 class="mb-3">{{ $t('settings') }}</h1>

        <v-text-field v-model="search" prepend-inner-icon="mdi-magnify" label="Search settings..." class="mb-4"
            clearable />

        <v-data-table :headers="headers" :items="filteredSettings" :search="search" item-value="id" :loading="loading">
            <template #item.actions="{ item }">
                <v-btn icon variant="text" @click="openDialog(item)">
                    <v-icon color="primary">mdi-pencil</v-icon>
                </v-btn>
            </template>
        </v-data-table>

        <!-- Dialog Edit -->
        <v-dialog v-model="dialog" width="500">
            <v-card>
                <v-card-title class="d-flex justify-space-between align-center">
                    Edit Setting
                    <v-btn variant="text" icon="mdi-close" @click="dialog = false"></v-btn>
                </v-card-title>

                <v-divider />

                <v-card-text>
                    <!-- Key (readonly) -->
                    <v-text-field label="Key" v-model="editedItem.key" disabled />

                    <!-- Upload Logo -->
                    <div v-if="editedItem.key === 'site_logo'">
                        <v-file-input v-model="editedItem.file" label="Upload Logo" accept="image/*"
                            @change="onFileChange" :error-messages="logoErrors" hide-details="auto" class="mb-3" />
                        <v-img :src="previewUrl || editedItem.value" max-width="150" />
                    </div>

                    <!-- Text value biasa -->
                    <v-text-field v-else label="Value" v-model="editedItem.value" :error-messages="valueErrors"
                        hide-details="auto" />
                </v-card-text>

                <v-card-actions>
                    <v-spacer />
                    <v-btn text @click="dialog = false">{{ $t('cancel') }}</v-btn>
                    <v-btn color="primary" variant="flat" @click="saveSetting" :loading="loading1">
                        <v-icon>mdi-content-save</v-icon>
                        {{ $t('save') }}
                    </v-btn>
                </v-card-actions>
            </v-card>
        </v-dialog>
    </v-container>
</template>

<script setup>
import { ref, reactive, computed, onMounted } from 'vue'
import api from '@/axios'
import { useSnackbar } from '@/stores/snackbar'

const settings = ref([])
const search = ref('')
const dialog = ref(false)
const loading = ref(false)
const loading1 = ref(false)
const previewUrl = ref(null)

const snackbar = useSnackbar()

// use reactive untuk objek
const editedItem = reactive({
    key: '',
    value: '',
    file: null,
})

const errors = ref({})

const headers = [
    { title: 'ID', key: 'id' },
    { title: 'Key', key: 'key' },
    { title: 'Value', key: 'value', sortable: false },
    { title: 'Actions', key: 'actions', sortable: false },
]

const filteredSettings = computed(() => {
    if (!search.value) return settings.value
    const term = search.value.toLowerCase()
    return settings.value.filter(item =>
        item.key.toLowerCase().includes(term) ||
        (item.value && item.value.toString().toLowerCase().includes(term))
    )
})

const valueErrors = computed(() => errors.value.value ?? [])
const logoErrors = computed(() => errors.value.logo ?? [])

const fetchSettings = async () => {
    loading.value = true
    const { data } = await api.get('/settings')
    settings.value = data
    loading.value = false
}

const openDialog = (item) => {
    editedItem.key = item.key
    editedItem.value = item.value
    editedItem.file = null
    previewUrl.value = null
    errors.value = {}
    dialog.value = true
}

const onFileChange = (files) => {
    const file = Array.isArray(files) ? files[0] : files
    if (file) {
        const reader = new FileReader()
        reader.onload = (e) => (previewUrl.value = e.target.result)
        reader.readAsDataURL(file)
        editedItem.file = file
    } else {
        editedItem.file = null
    }
}

const saveSetting = async () => {
    errors.value = {}
    const form = new FormData()

    if (editedItem.key === 'site_logo') {
        if (!editedItem.file) {
            errors.value.logo = ['Pilih file terlebih dahulu']
            snackbar.showSnackbar('Pilih file terlebih dahulu!')
            return
        }
        form.append('logo', editedItem.file)
    } else {
        form.append('value', editedItem.value)
    }

    loading1.value = true
    try {
        const res = await api.post(`/settings/${editedItem.key}`, form)
        snackbar.showSnackbar(res.data.message)
        dialog.value = false
        fetchSettings()
    } catch (err) {
        if (err.response?.status === 422) {
            const resErrors = err.response.data.errors || {}
            Object.keys(resErrors).forEach(key => {
                errors.value[key] = Array.isArray(resErrors[key]) ? resErrors[key] : [resErrors[key]]
            })
            setTimeout(() => (errors.value = {}), 4000)
        }
        snackbar.showSnackbar(err.response?.data?.message || 'Gagal menyimpan setting')
    }
    loading1.value = false
}

onMounted(fetchSettings)
</script>
